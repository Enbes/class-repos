# 1 "lexer.mll"
  			      	 	  			 	
  open Lexing
  open Parser
  open Printf
 			      	 	  			 	  
  exception Eof
  exception Syntax_err of string
 			      	 	  			 	      
  let next_line lexbuf =
    let pos = lexbuf.lex_curr_p in
    lexbuf.lex_curr_p <-
      { pos with pos_bol = pos.pos_cnum;
                 pos_lnum = pos.pos_lnum + 1;
      }

  let add_token _ _ = ()
 			      	 	  			 	      
  let keyword_table = Hashtbl.create 42
  let _ =
    List.iter (fun (kwd, tok) -> Hashtbl.add keyword_table kwd tok)
              [ "def", DEF;
		"let", LET;
		"while", WHILE;
		"if", IF;
		"then", THEN;
		"else", ELSE;
		"ref", REF;
		"int", INT;
		"float", FLOAT;
		"bool", BOOL;
		"true", BOOLCONST(true);
		"false", BOOLCONST(false);
		"unit", UNIT;
		"tt", TT;
		"not", NOT;
		"in", IN ]


# 41 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\229\255\230\255\231\255\234\255\235\255\236\255\237\255\
    \001\000\002\000\241\255\002\000\001\000\245\255\246\255\247\255\
    \248\255\079\000\156\000\252\255\001\000\253\255\004\000\017\000\
    \255\255\254\255\166\000\243\255\242\255\240\255\239\255\002\000\
    \253\255\254\255\255\255\004\000\130\000\251\255\050\000\050\000\
    \254\255\255\255\006\000\253\255\252\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \023\000\022\000\255\255\026\000\026\000\255\255\255\255\255\255\
    \255\255\006\000\005\000\255\255\003\000\255\255\017\000\011\000\
    \255\255\255\255\004\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\004\000\004\000\
    \255\255\255\255\000\000\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\255\255\000\000\255\255\255\255\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\032\000\
    \000\000\000\000\000\000\255\255\037\000\000\000\255\255\255\255\
    \000\000\000\000\255\255\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\019\000\019\000\034\000\020\000\034\000\035\000\
    \041\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \021\000\016\000\000\000\000\000\000\000\000\000\012\000\027\000\
    \022\000\007\000\013\000\015\000\003\000\014\000\025\000\023\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\008\000\004\000\010\000\009\000\030\000\029\000\
    \024\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\044\000\043\000\000\000\000\000\000\000\
    \000\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\006\000\011\000\005\000\028\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\000\000\000\000\000\000\041\000\000\000\000\000\042\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\039\000\000\000\038\000\000\000\017\000\000\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\026\000\000\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\033\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\020\000\031\000\000\000\035\000\031\000\
    \042\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\012\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\022\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\008\000\009\000\
    \023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\038\000\039\000\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\011\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\255\255\255\255\255\255\036\000\255\255\255\255\036\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\036\000\255\255\036\000\255\255\017\000\255\255\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\018\000\255\255\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\031\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\036\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 43 "lexer.mll"
               ( comment lexbuf )
# 193 "lexer.ml"

  | 1 ->
# 44 "lexer.mll"
               ( nested_comment 0 lexbuf )
# 198 "lexer.ml"

  | 2 ->
# 45 "lexer.mll"
                                ( token lexbuf )
# 203 "lexer.ml"

  | 3 ->
# 46 "lexer.mll"
                                ( next_line lexbuf; token lexbuf )
# 208 "lexer.ml"

  | 4 ->
let
# 47 "lexer.mll"
                               lxm
# 214 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 48 "lexer.mll"
        ( add_token ("FLOATCONST(" ^ lxm ^ ")") lexbuf;
        FLOATCONST(float_of_string lxm) )
# 219 "lexer.ml"

  | 5 ->
let
# 50 "lexer.mll"
                  lxm
# 225 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 51 "lexer.mll"
      ( add_token ("INTCONST(" ^ lxm ^ ")") lexbuf;
        INTCONST(Int32.of_string lxm) )
# 230 "lexer.ml"

  | 6 ->
let
# 53 "lexer.mll"
                                                         id
# 236 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 54 "lexer.mll"
               ( try
                   let id' = Hashtbl.find keyword_table id in
		   add_token id lexbuf;
		   id'
                 with Not_found ->
                   add_token ("ID(" ^ id ^ ")") lexbuf;
                   ID id
	       )
# 247 "lexer.ml"

  | 7 ->
# 62 "lexer.mll"
               ( add_token "DEREF" lexbuf; DEREF )
# 252 "lexer.ml"

  | 8 ->
# 63 "lexer.mll"
               ( add_token "PLUS" lexbuf; PLUS )
# 257 "lexer.ml"

  | 9 ->
# 64 "lexer.mll"
               ( add_token "MINUS" lexbuf; MINUS )
# 262 "lexer.ml"

  | 10 ->
# 65 "lexer.mll"
               ( add_token "TIMES" lexbuf; TIMES )
# 267 "lexer.ml"

  | 11 ->
# 66 "lexer.mll"
               ( add_token "DIV" lexbuf; DIV )
# 272 "lexer.ml"

  | 12 ->
# 67 "lexer.mll"
               ( add_token "AND" lexbuf; AND )
# 277 "lexer.ml"

  | 13 ->
# 68 "lexer.mll"
               ( add_token "OR" lexbuf; OR )
# 282 "lexer.ml"

  | 14 ->
# 69 "lexer.mll"
               ( add_token "LT" lexbuf; LT )
# 287 "lexer.ml"

  | 15 ->
# 70 "lexer.mll"
               ( add_token "INT_EQ" lexbuf; INT_EQ )
# 292 "lexer.ml"

  | 16 ->
# 71 "lexer.mll"
               ( add_token "DEFEQ" lexbuf; DEFEQ )
# 297 "lexer.ml"

  | 17 ->
# 72 "lexer.mll"
               ( add_token "LPAREN" lexbuf; LPAREN )
# 302 "lexer.ml"

  | 18 ->
# 73 "lexer.mll"
               ( add_token "RPAREN" lexbuf; RPAREN )
# 307 "lexer.ml"

  | 19 ->
# 74 "lexer.mll"
               ( add_token "LBRACE" lexbuf; LBRACE )
# 312 "lexer.ml"

  | 20 ->
# 75 "lexer.mll"
               ( add_token "RBRACE" lexbuf; RBRACE )
# 317 "lexer.ml"

  | 21 ->
# 76 "lexer.mll"
               ( add_token "SEMI" lexbuf; SEMI )
# 322 "lexer.ml"

  | 22 ->
# 77 "lexer.mll"
               ( add_token "EQ" lexbuf; EQ )
# 327 "lexer.ml"

  | 23 ->
# 78 "lexer.mll"
               ( add_token "COLON" lexbuf; COLON )
# 332 "lexer.ml"

  | 24 ->
# 79 "lexer.mll"
               ( add_token "COMMA" lexbuf; COMMA )
# 337 "lexer.ml"

  | 25 ->
# 80 "lexer.mll"
               ( add_token "EOF" lexbuf; EOF )
# 342 "lexer.ml"

  | 26 ->
# 81 "lexer.mll"
               ( raise (Syntax_err ("Unexpected char: " ^ Lexing.lexeme lexbuf)) )
# 347 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 31
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 84 "lexer.mll"
               ( next_line lexbuf; token lexbuf )
# 359 "lexer.ml"

  | 1 ->
# 85 "lexer.mll"
               ( EOF )
# 364 "lexer.ml"

  | 2 ->
# 86 "lexer.mll"
               ( comment lexbuf )
# 369 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and nested_comment level lexbuf =
    __ocaml_lex_nested_comment_rec level lexbuf 36
and __ocaml_lex_nested_comment_rec level lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 89 "lexer.mll"
               ( next_line lexbuf; nested_comment level lexbuf )
# 381 "lexer.ml"

  | 1 ->
# 90 "lexer.mll"
               ( raise (Syntax_err "Unclosed comment") )
# 386 "lexer.ml"

  | 2 ->
# 91 "lexer.mll"
               ( nested_comment (level+1) lexbuf )
# 391 "lexer.ml"

  | 3 ->
# 92 "lexer.mll"
               ( if level = 0 then token lexbuf
    	       	 else nested_comment (level-1) lexbuf
               )
# 398 "lexer.ml"

  | 4 ->
# 95 "lexer.mll"
               ( nested_comment level lexbuf )
# 403 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_nested_comment_rec level lexbuf __ocaml_lex_state

;;

